# -*- coding: utf-8 -*-
"""resnet more data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aWxv8CuHLc_eWqwVLUp57LWrgYt1t5UL
"""

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

import cv2
import os
import numpy as np
from keras.applications.resnet50 import preprocess_input

X = []
y = []
base_path = '/content/drive/My Drive/prediction_final'
for label in (os.listdir(base_path)):
  
  for image in (os.listdir(os.path.join(base_path,label))):
    
    img = cv2.imread(os.path.join(base_path,label,image))
    img = cv2.resize(img,(224,224),interpolation=cv2.INTER_AREA)
    img = preprocess_input(img.reshape(1,224,224,3))
    X.append(img.reshape(224,224,3))
    y.append(label)

X = np.array(X)
y = np.array(y)

from sklearn.utils import shuffle
from keras.utils import to_categorical
from sklearn.preprocessing import LabelEncoder
X,Y =  shuffle(X,y)
encoder = LabelEncoder()
y = encoder.fit_transform(Y.reshape(-1,1))
y = to_categorical(y,8)
print(X.shape)
print(y.shape)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.15, random_state = 45)
y_train.shape, X_train.shape, X_test.shape

from keras.preprocessing.image import ImageDataGenerator
datagenerator = ImageDataGenerator(horizontal_flip=True,validation_split=0.15,rotation_range=10)
datagenerator.fit(X_train)
X_train.shape

import matplotlib.pyplot as plt

plt.imshow(X[367])

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import cv2

import os
from tqdm import tqdm
from keras.applications.resnet50 import preprocess_input
from keras.preprocessing.image import ImageDataGenerator

"""#Model"""

import keras
from keras.layers import Dense,Input,Flatten,Dropout,GlobalAveragePooling2D,BatchNormalization
from keras.models import Model
from keras.utils import to_categorical
from keras.applications.resnet50 import ResNet50,preprocess_input
from keras.callbacks import ReduceLROnPlateau,EarlyStopping,ModelCheckpoint

from keras.optimizers import Adam
from keras.applications import DenseNet121

resnet = ResNet50(weights='imagenet',include_top = False,input_shape=(224,224,3))
for layer in resnet.layers[:-14]:
  layer.trainable = False

flatten = GlobalAveragePooling2D()(resnet.output)
dropout = Dropout(rate=0.5)(flatten)
dense = Dense(256,activation='relu')(dropout)

drp2 = Dropout(0.5)(dense)
dense = Dense(8,activation='softmax')(drp2)
model = Model(inputs=resnet.input,outputs=dense)
model.summary()
model.compile(optimizer=Adam(learning_rate=3e-4,decay=1e-6),loss='categorical_crossentropy',metrics=['accuracy'])

reduce_learning_rate = ReduceLROnPlateau(monitor='val_accuracy', 
                                            patience=2,cooldown = 2, 
                                            verbose=1, 
                                            factor=0.1, 
                                            min_lr=0.00001)
callbacks = [reduce_learning_rate]

hist = model.fit(datagenerator.flow(X_train[:560],y_train[:560],batch_size=32),epochs=12,steps_per_epoch=len(X_train[:560])/32,shuffle=True,validation_data=(X_train[560:],y_train[560:]),callbacks=callbacks)

plt.plot(hist.history["loss"], label="train_loss")
plt.plot(hist.history["val_loss"], label="val_loss")
plt.title("Model Training")
plt.xlabel("Epoch #")
plt.ylabel("Loss")
plt.legend()
plt.savefig("epochs.png")

plt.plot(hist.history["accuracy"], label="train_acc")
plt.plot(hist.history["val_accuracy"], label="val_acc")
plt.title("Model Training")
plt.xlabel("Epoch #")
plt.ylabel("Accuracy")
plt.legend()
plt.savefig("epochs_acc.png")

model.save('/content/drive/My Drive/resnetmoredata.h5')

from keras.models import load_model
x = load_model('/content/drive/My Drive/resnetbest78.h5')

a = list(['bharatanatyam', 'kathak', 'kathakali', 'kuchipudi', 'manipuri',
       'mohiniyattam', 'odissi', 'sattriya'])

prediction =  []

file_path = '/content/drive/My Drive/dataset/test.csv'
test = pd.read_csv(file_path)
file_name = list(test['Image'])
image_path = '/content/drive/My Drive/dataset/test'
for i in file_name:
  image = cv2.imread(os.path.join(image_path,i))
  image = cv2.resize(image, (224, 224),interpolation=cv2.INTER_AREA)
  image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
  # image = np.expand_dims(image,axis=0)
  
  
  image = preprocess_input(image.reshape(1,224,224,3))
  
  place = np.argmax(model.predict(image), axis=-1)

  final = a[int(place)]
  prediction.append(final)


data = {'Image':  file_name,
        'target': prediction}
done  = pd.DataFrame(data = data,columns = ['Image','target'])
done.to_csv('submissionnn.csv',index=False)

from sklearn.metrics import multilabel_confusion_matrix,confusion_matrix,plot_confusion_matrix,f1_score

y_pred = np.argmax(model.predict(X_test),axis=-1)
y_test_1 = y_test.argmax(axis=1)
cm = confusion_matrix(y_test_1,y_pred)
cm

plt.matshow(cm)
plt.show()
plt.savefig("cm.png")

f1score = f1_score(y_test_1,y_pred,average='weighted')
f1score

from sklearn.metrics import classification_report
print(classification_report(y_test_1, y_pred, target_names=a))

